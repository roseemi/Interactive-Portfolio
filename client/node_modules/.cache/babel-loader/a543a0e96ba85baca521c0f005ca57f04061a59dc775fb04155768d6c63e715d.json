{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal\\\\School\\\\Projects\\\\guess_who_react\\\\client\\\\src\\\\pages\\\\components\\\\GameInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport defaultIcon from \"../../assets/camera.svg\";\nimport { PlaylistName, Round, Score, Thumbnail, NameOfArtistOrSong, ArtistOrSong, RemainingGuesses, UserAnswerResult } from \"./GameInterfaceChildComponents\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameInterface({\n  playlistYear,\n  playlist,\n  toggleGameComplete\n}) {\n  _s();\n  // Reference for the text input box\n  const userInput = useRef();\n\n  // State handling for UI elements based on game progression\n  const [submitButtonDisabled, setSubmitButtonDisabled] = useState(false);\n  const [newRoundButtonDisabled, setNewRoundButtonDisabled] = useState(true);\n  const [song, setSong] = useState(null);\n  const [round, setRound] = useState(1);\n  const [score, setScore] = useState(0);\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(false);\n  const [userAnswerResult, setUserAnswerResult] = useState(\"\");\n  const [scoreIncreaseBy, setScoreIncreaseBy] = useState(0);\n  const [thumbnail, setThumbnail] = useState(defaultIcon);\n  const [thumbnailBlur, setThumbnailBlur] = useState(30);\n  const [artistOrSongTitle, setArtistOrSongTitle] = useState(null);\n  const [artistOrSong, setArtistOrSong] = useState(null);\n  const [remainingGuesses, setRemainingGuesses] = useState(3);\n  var gameModePlaylist = playlist.tracks.items;\n\n  // Set the attributes of the page to match the song\n  // Executes on startup and when \"Next Round\" button is clicked\n  useEffect(() => {\n    try {\n      // Setup UI and variables for a new round\n      setNewRoundButtonDisabled(true);\n      setRemainingGuesses(3);\n\n      // Cycle through the entire playlist before ending the game\n      if (round < playlist.tracks.total) {\n        getNewSong();\n        // setRound(round => round + 1);\n        userInput.current.value = \"\";\n      } else {\n        toggleGameComplete(score);\n        setScore(0);\n        round(0);\n      }\n    } catch (error) {\n      setUserAnswerResult(\"Sorry! There was an error.\");\n    }\n  }, [round]);\n\n  // Disable the game if the user runs out of guesses\n  // Execute every time there is an update to remainingGuesses\n  useEffect(() => {\n    // Determine if the guess was correct or not\n    const isCorrect = isCorrectAnswer(); // Local use so the round can be terminated if isCorrectAnswer state does not change\n    setIsAnswerCorrect(isCorrect); // Global state use\n\n    // Update thumbnail UI based on the num of guesses left\n    updateThumbnailBlur(isCorrect);\n\n    // User ran out of guesses and isCorrectAnswer state never to true changed = round over\n    if (remainingGuesses === 0 && !isCorrect) {\n      setScoreIncreaseBy(0);\n      setUserAnswerResult(\"Arrondissez-vous!\");\n      setSubmitButtonDisabled(true);\n      setNewRoundButtonDisabled(false);\n    } else if (!isCorrect) setUserAnswerResult(\"Faux!\");\n  }, [remainingGuesses]);\n\n  // Update UI depending on whether the answer was correct or not\n  // Executes after the remainingGuesses useEffect()\n  useEffect(() => {\n    console.log(isAnswerCorrect);\n    if (isAnswerCorrect) correctAnswerRender(); // Render the correct answer UI\n    else if (remainingGuesses === 3) setUserAnswerResult(\"\"); // New round - reset result to blank\n    else setUserAnswerResult(\"Faux!\"); // Else, the answer was wrong\n  }, [isAnswerCorrect]);\n\n  // Retrieve a new random song from the playlist\n  // Executes once during a new round\n  const getNewSong = () => {\n    try {\n      var randomNumber = Math.floor(Math.random() * gameModePlaylist.length); // Select a random song from the playlist by index\n      var newSong = gameModePlaylist[randomNumber].track; // Get the song by index and save it\n\n      setSong(newSong); // Set the song's state\n      updateArtistOrSong(Math.floor(Math.random() * 2), newSong); // 0 = Guess the Artist && 1 = Guess the Song\n      setSubmitButtonDisabled(false);\n      setThumbnail(newSong.album.images[0].url); // Change the img to the thumbnail\n      updateThumbnailBlur(); // Reset thumbnail blur\n      setUserAnswerResult(\"\"); // Reset results from user answer\n      gameModePlaylist.splice(randomNumber, 1); // Remove this song from the playlist\n    } catch (error) {\n      setUserAnswerResult(\"Sorry! There was an error.\");\n    }\n  };\n\n  // Inform the user what to guess this round\n  const updateArtistOrSong = (num, newSong) => {\n    setArtistOrSong(num);\n    // 0 = guess the artist\n    if (num === 0) {\n      setArtistOrSongTitle(newSong.album.artists[0].name);\n    }\n    // 1 = guess the song\n    else {\n      setArtistOrSongTitle(newSong.name);\n    }\n  };\n\n  // Decrease the amount of guesses left\n  // Executes only when \"Submit Answer\" button is clicked\n  const updateRemainingGuesses = () => {\n    setRemainingGuesses(prevGuesses => prevGuesses - 1);\n  };\n\n  // Change the blur depending on how many guesses are left/if the answer was correct\n  const updateThumbnailBlur = isAnswerCorrect => {\n    if (!isAnswerCorrect) {\n      switch (remainingGuesses) {\n        case 3:\n          setThumbnailBlur(\"blur3\");\n          break;\n        case 2:\n          setThumbnailBlur(\"blur2\");\n          break;\n        case 1:\n          setThumbnailBlur(\"blur1\");\n          break;\n        case 0:\n        default:\n          setThumbnailBlur(\"blur0\");\n          break;\n      }\n    } else setThumbnailBlur(\"blur0\");\n  };\n\n  // Update the UI and score if the user guessed correctly\n  const correctAnswerRender = () => {\n    setUserAnswerResult(\"Correct!\"); // Tell the user they're correct\n    setScoreIncreaseBy(remainingGuesses + 1);\n    setScore(score => score + (remainingGuesses + 1)); // Increase the total score based on how many guesses were left\n    setSubmitButtonDisabled(true); // Disable \"submit\" button so user goes to next round\t\t\t\n    setNewRoundButtonDisabled(false); // Enable the new round button\n  };\n  const isCorrectAnswer = () => {\n    const input = userInput.current.value.trim().toLowerCase();\n\n    // If this is an artist name round\n    if (artistOrSong === 0 && song !== null) {\n      const correctAnswer = song.album.artists[0].name.toLowerCase();\n      if (correctAnswer === input && input !== \"\") return true;else return false;\n    }\n    // If this is a song name round\n    else if (song !== null) {\n      const correctAnswer = song.name.toLowerCase();\n      if (correctAnswer === input && input !== \"\") return true;else return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-h-11/12\",\n    children: [/*#__PURE__*/_jsxDEV(PlaylistName, {\n      playlist: playlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Round, {\n      round: round,\n      playlist: playlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Score, {\n      score: score,\n      scoreIncreaseBy: scoreIncreaseBy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rounded justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(Thumbnail, {\n        thumbnail: thumbnail,\n        thumbnailBlur: thumbnailBlur\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(NameOfArtistOrSong, {\n        artistOrSongTitle: artistOrSongTitle,\n        isAnswerCorrect: isAnswerCorrect,\n        remainingGuesses: remainingGuesses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(RemainingGuesses, {\n      remainingGuesses: remainingGuesses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ArtistOrSong, {\n      artistOrSong: artistOrSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"shadow appearance-none border rounded w-5/6 lg:w-2/3 mx-auto my-4 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"answer\",\n      type: \"text\",\n      placeholder: \"Qu'est-ce que c'est!?\",\n      onKeyDown: e => {\n        if (e.key === \"Enter\" && !submitButtonDisabled) updateRemainingGuesses();\n      },\n      ref: userInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(UserAnswerResult, {\n      userAnswerResult: userAnswerResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bg-white w-2/3 lg:w-1/3 mx-auto hover:bg-gray-100 disabled:bg-slate-500 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\",\n      id: \"answer-button\",\n      onClick: updateRemainingGuesses,\n      disabled: submitButtonDisabled,\n      children: \"Soumettre La R\\xE9ponse\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bg-white w-2/3 lg:w-1/3 my-4 mx-auto hover:bg-gray-100 disabled:bg-slate-500 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded block shadow\",\n      id: \"next-round-button\",\n      onClick: () => setRound(round => round + 1),\n      disabled: newRoundButtonDisabled,\n      children: \"Tour Suivant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 3\n  }, this);\n}\n_s(GameInterface, \"nFML53yA8PjS62YDmxVjndPehbU=\");\n_c = GameInterface;\nvar _c;\n$RefreshReg$(_c, \"GameInterface\");","map":{"version":3,"names":["React","useEffect","useState","useRef","defaultIcon","PlaylistName","Round","Score","Thumbnail","NameOfArtistOrSong","ArtistOrSong","RemainingGuesses","UserAnswerResult","jsxDEV","_jsxDEV","GameInterface","playlistYear","playlist","toggleGameComplete","_s","userInput","submitButtonDisabled","setSubmitButtonDisabled","newRoundButtonDisabled","setNewRoundButtonDisabled","song","setSong","round","setRound","score","setScore","isAnswerCorrect","setIsAnswerCorrect","userAnswerResult","setUserAnswerResult","scoreIncreaseBy","setScoreIncreaseBy","thumbnail","setThumbnail","thumbnailBlur","setThumbnailBlur","artistOrSongTitle","setArtistOrSongTitle","artistOrSong","setArtistOrSong","remainingGuesses","setRemainingGuesses","gameModePlaylist","tracks","items","total","getNewSong","current","value","error","isCorrect","isCorrectAnswer","updateThumbnailBlur","console","log","correctAnswerRender","randomNumber","Math","floor","random","length","newSong","track","updateArtistOrSong","album","images","url","splice","num","artists","name","updateRemainingGuesses","prevGuesses","input","trim","toLowerCase","correctAnswer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","type","placeholder","onKeyDown","e","key","ref","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/Personal/School/Projects/guess_who_react/client/src/pages/components/GameInterface.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport defaultIcon from \"../../assets/camera.svg\";\r\nimport {\r\n\tPlaylistName, Round, Score, Thumbnail, NameOfArtistOrSong,\r\n\tArtistOrSong, RemainingGuesses, UserAnswerResult\r\n} from \"./GameInterfaceChildComponents\";\r\n\r\nexport default function GameInterface({ playlistYear, playlist, toggleGameComplete }) {\r\n\t// Reference for the text input box\r\n\tconst userInput = useRef();\r\n\r\n\t// State handling for UI elements based on game progression\r\n\tconst [submitButtonDisabled, setSubmitButtonDisabled] = useState(false);\r\n\tconst [newRoundButtonDisabled, setNewRoundButtonDisabled] = useState(true);\r\n\tconst [song, setSong] = useState(null);\r\n\tconst [round, setRound] = useState(1);\r\n\tconst [score, setScore] = useState(0);\r\n\tconst [isAnswerCorrect, setIsAnswerCorrect] = useState(false);\r\n\tconst [userAnswerResult, setUserAnswerResult] = useState(\"\");\r\n\tconst [scoreIncreaseBy, setScoreIncreaseBy] = useState(0);\r\n\tconst [thumbnail, setThumbnail] = useState(defaultIcon);\r\n\tconst [thumbnailBlur, setThumbnailBlur] = useState(30);\r\n\tconst [artistOrSongTitle, setArtistOrSongTitle] = useState(null);\r\n\tconst [artistOrSong, setArtistOrSong] = useState(null);\r\n\tconst [remainingGuesses, setRemainingGuesses] = useState(3);\r\n\r\n\tvar gameModePlaylist = playlist.tracks.items;\r\n\r\n\t// Set the attributes of the page to match the song\r\n\t// Executes on startup and when \"Next Round\" button is clicked\r\n\tuseEffect(() => {\r\n\t\ttry {\r\n\t\t\t// Setup UI and variables for a new round\r\n\t\t\tsetNewRoundButtonDisabled(true);\r\n\t\t\tsetRemainingGuesses(3);\r\n\r\n\t\t\t// Cycle through the entire playlist before ending the game\r\n\t\t\tif (round < playlist.tracks.total) {\r\n\t\t\t\tgetNewSong();\r\n\t\t\t\t// setRound(round => round + 1);\r\n\t\t\t\tuserInput.current.value = \"\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttoggleGameComplete(score);\r\n\t\t\t\tsetScore(0);\r\n\t\t\t\tround(0);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error) {\r\n\t\t\tsetUserAnswerResult(\"Sorry! There was an error.\");\r\n\t\t}\r\n\t}, [round]);\r\n\r\n\t// Disable the game if the user runs out of guesses\r\n\t// Execute every time there is an update to remainingGuesses\r\n\tuseEffect(() => {\r\n\t\t// Determine if the guess was correct or not\r\n\t\tconst isCorrect = isCorrectAnswer();\t// Local use so the round can be terminated if isCorrectAnswer state does not change\r\n\t\tsetIsAnswerCorrect(isCorrect);\t\t\t// Global state use\r\n\r\n\t\t// Update thumbnail UI based on the num of guesses left\r\n\t\tupdateThumbnailBlur(isCorrect);\r\n\r\n\t\t// User ran out of guesses and isCorrectAnswer state never to true changed = round over\r\n\t\tif (remainingGuesses === 0 && !isCorrect) {\r\n\t\t\tsetScoreIncreaseBy(0);\r\n\t\t\tsetUserAnswerResult(\"Arrondissez-vous!\");\r\n\t\t\tsetSubmitButtonDisabled(true);\r\n\t\t\tsetNewRoundButtonDisabled(false);\r\n\t\t}\r\n\t\telse if (!isCorrect) setUserAnswerResult(\"Faux!\");\r\n\t}, [remainingGuesses]);\r\n\r\n\t// Update UI depending on whether the answer was correct or not\r\n\t// Executes after the remainingGuesses useEffect()\r\n\tuseEffect(() => {\r\n\t\tconsole.log(isAnswerCorrect);\r\n\t\tif (isAnswerCorrect) correctAnswerRender();\t\t\t\t\t// Render the correct answer UI\r\n\t\telse if (remainingGuesses === 3) setUserAnswerResult(\"\");\t// New round - reset result to blank\r\n\t\telse setUserAnswerResult(\"Faux!\");\t\t\t\t\t\t\t// Else, the answer was wrong\r\n\t}, [isAnswerCorrect]);\r\n\r\n\t// Retrieve a new random song from the playlist\r\n\t// Executes once during a new round\r\n\tconst getNewSong = () => {\r\n\t\ttry {\r\n\t\t\tvar randomNumber = Math.floor(Math.random() * gameModePlaylist.length);\t// Select a random song from the playlist by index\r\n\t\t\tvar newSong = gameModePlaylist[randomNumber].track; \t\t\t\t\t// Get the song by index and save it\r\n\r\n\t\t\tsetSong(newSong);\t\t\t\t\t\t\t\t\t\t\t// Set the song's state\r\n\t\t\tupdateArtistOrSong(Math.floor(Math.random() * 2), newSong); // 0 = Guess the Artist && 1 = Guess the Song\r\n\t\t\tsetSubmitButtonDisabled(false);\r\n\t\t\tsetThumbnail(newSong.album.images[0].url);\t\t\t\t\t// Change the img to the thumbnail\r\n\t\t\tupdateThumbnailBlur();\t\t\t\t\t\t\t\t\t\t// Reset thumbnail blur\r\n\t\t\tsetUserAnswerResult(\"\");\t\t\t\t\t\t\t\t\t// Reset results from user answer\r\n\t\t\tgameModePlaylist.splice(randomNumber, 1)\t\t\t\t\t// Remove this song from the playlist\r\n\t\t}\r\n\t\tcatch (error) {\r\n\t\t\tsetUserAnswerResult(\"Sorry! There was an error.\");\r\n\t\t}\r\n\t};\r\n\r\n\t// Inform the user what to guess this round\r\n\tconst updateArtistOrSong = (num, newSong) => {\r\n\t\tsetArtistOrSong(num);\r\n\t\t// 0 = guess the artist\r\n\t\tif (num === 0) {\r\n\t\t\tsetArtistOrSongTitle(newSong.album.artists[0].name);\r\n\t\t}\r\n\t\t// 1 = guess the song\r\n\t\telse {\r\n\t\t\tsetArtistOrSongTitle(newSong.name);\r\n\t\t}\r\n\t};\r\n\r\n\t// Decrease the amount of guesses left\r\n\t// Executes only when \"Submit Answer\" button is clicked\r\n\tconst updateRemainingGuesses = () => {\r\n\t\tsetRemainingGuesses(prevGuesses => prevGuesses - 1);\r\n\t};\r\n\r\n\t// Change the blur depending on how many guesses are left/if the answer was correct\r\n\tconst updateThumbnailBlur = (isAnswerCorrect) => {\r\n\t\tif (!isAnswerCorrect) {\r\n\t\t\tswitch (remainingGuesses) {\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tsetThumbnailBlur(\"blur3\")\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tsetThumbnailBlur(\"blur2\")\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tsetThumbnailBlur(\"blur1\")\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 0:\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tsetThumbnailBlur(\"blur0\")\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse setThumbnailBlur(\"blur0\");\r\n\t}\r\n\r\n\t// Update the UI and score if the user guessed correctly\r\n\tconst correctAnswerRender = () => {\r\n\t\tsetUserAnswerResult(\"Correct!\");\t\t\t\t\t// Tell the user they're correct\r\n\t\tsetScoreIncreaseBy(remainingGuesses + 1);\r\n\t\tsetScore(score => score + (remainingGuesses + 1))\t// Increase the total score based on how many guesses were left\r\n\t\tsetSubmitButtonDisabled(true);\t\t\t\t\t\t// Disable \"submit\" button so user goes to next round\t\t\t\r\n\t\tsetNewRoundButtonDisabled(false);\t\t\t\t\t// Enable the new round button\r\n\t}\r\n\r\n\tconst isCorrectAnswer = () => {\r\n\t\tconst input = userInput.current.value.trim().toLowerCase()\r\n\t\t\r\n\t\t// If this is an artist name round\r\n\t\tif (artistOrSong === 0 && song !== null) {\r\n\t\t\tconst correctAnswer = song.album.artists[0].name.toLowerCase();\r\n\r\n\t\t\tif (correctAnswer === input && input !== \"\") return true;\r\n\t\t\telse return false;\r\n\t\t}\r\n\t\t// If this is a song name round\r\n\t\telse if (song !== null) {\r\n\t\t\tconst correctAnswer = song.name.toLowerCase()\r\n\t\t\t\r\n\t\t\tif (correctAnswer === input && input !== \"\") return true;\r\n\t\t\telse return false;\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"max-h-11/12\">\r\n\t\t\t<PlaylistName \r\n\t\t\t\tplaylist={playlist} \r\n\t\t\t/>\r\n\t\t\t<Round \r\n\t\t\t\tround={round} \r\n\t\t\t\tplaylist={playlist} \r\n\t\t\t/>\r\n\t\t\t<Score \r\n\t\t\t\tscore={score} \r\n\t\t\t\tscoreIncreaseBy={scoreIncreaseBy} \r\n\t\t\t/>\r\n\t\t\t<div className=\"rounded justify-center\">\r\n\t\t\t\t<Thumbnail \r\n\t\t\t\t\tthumbnail={thumbnail} \r\n\t\t\t\t\tthumbnailBlur={thumbnailBlur} \r\n\t\t\t\t/>\r\n\t\t\t\t<NameOfArtistOrSong \r\n\t\t\t\t\tartistOrSongTitle={artistOrSongTitle}\r\n\t\t\t\t\tisAnswerCorrect={isAnswerCorrect} \r\n\t\t\t\t\tremainingGuesses={remainingGuesses} \r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<RemainingGuesses \r\n\t\t\t\tremainingGuesses={remainingGuesses} \r\n\t\t\t/>\r\n\t\t\t<ArtistOrSong \r\n\t\t\t\tartistOrSong={artistOrSong} \r\n\t\t\t/>\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"shadow appearance-none border rounded w-5/6 lg:w-2/3 mx-auto my-4 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n\t\t\t\tid=\"answer\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Qu'est-ce que c'est!?\"\r\n\t\t\t\tonKeyDown={(e) => {\r\n\t\t\t\t\tif (e.key === \"Enter\" && !submitButtonDisabled)\r\n\t\t\t\t\t\tupdateRemainingGuesses();\r\n\t\t\t\t\t}}\r\n\t\t\t\tref={userInput} />\r\n\t\t\t<UserAnswerResult userAnswerResult={userAnswerResult} />\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"bg-white w-2/3 lg:w-1/3 mx-auto hover:bg-gray-100 disabled:bg-slate-500 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\"\r\n\t\t\t\tid=\"answer-button\"\r\n\t\t\t\tonClick={(updateRemainingGuesses)}\r\n\t\t\t\tdisabled={submitButtonDisabled}>\r\n\t\t\t\tSoumettre La Réponse\r\n\t\t\t</button>\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"bg-white w-2/3 lg:w-1/3 my-4 mx-auto hover:bg-gray-100 disabled:bg-slate-500 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded block shadow\"\r\n\t\t\t\tid=\"next-round-button\"\r\n\t\t\t\tonClick={() => setRound(round => round + 1)}\r\n\t\t\t\tdisabled={newRoundButtonDisabled}>\r\n\t\t\t\tTour Suivant\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}