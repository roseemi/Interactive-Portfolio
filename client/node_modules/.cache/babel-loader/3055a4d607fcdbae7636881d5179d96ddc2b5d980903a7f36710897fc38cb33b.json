{"ast":null,"code":"import React,{useEffect,useState,useRef}from\"react\";import defaultIcon from\"../../assets/camera.svg\";import{UpdatePlaylistName,UpdateCurrentRound,UpdateScore,UpdateThumbnail,UpdateArtistOrSongTitle,UpdateArtistOrSong,UpdateRemainingGuesses,UpdateUserAnswerResult}from\"./GameInterfaceSubcomponents\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function GameInterface(_ref){let{playlistYear,playlist,toggleGameComplete}=_ref;// Reference for the text input box\nconst userInput=useRef();// State handling for UI elements based on game progression\nconst[userAnswerResult,setUserAnswerResult]=useState(\"\");const[startNewRound,setStartNewRound]=useState(true);const[submitUserAnswerButtonDisabled,setSubmitUserAnswerButtonDisabled]=useState(false);const[startNewRoundButtonDisabled,setStartNewRoundButtonDisabled]=useState(true);const[song,setSong]=useState(null);const[score,setScore]=useState(0);const[currentRound,setCurrentRound]=useState(0);const[thumbnail,setThumbnail]=useState(defaultIcon);const[thumbnailBlur,setThumbnailBlur]=useState(30);const[artistOrSongTitle,setArtistOrSongTitle]=useState(null);const[artistOrSong,setArtistOrSong]=useState(null);const[remainingGuesses,setRemainingGuesses]=useState(3);var gameModePlaylist=playlist.tracks.items;// Set the attributes of the page to match the song\n// Executes on startup and when \"Next Round\" button is clicked\nuseEffect(()=>{try{// Setup UI and variables for a new round\nsetStartNewRoundButtonDisabled(true);setRemainingGuesses(3);// Cycle through the entire playlist before ending the game\nif(currentRound<playlist.tracks.total){getNewSong();setCurrentRound(currentRound=>currentRound+1);userInput.current.value=\"\";}else{toggleGameComplete(score);setScore(0);}}catch(error){setUserAnswerResult(\"Sorry! There was an error.\");}},[startNewRound]);// Disable the game if the user runs out of guesses\n// Execute every time there is an update to remainingGuesses\nuseEffect(()=>{// Handle whether the guess was correct or not\nconst isAnswerCorrect=isUserAnswerCorrect();if(isAnswerCorrect)correctAnswerRender();else setUserAnswerResult(\"Faux!\");updateThumbnailBlur(isAnswerCorrect);// Update UI depending on the num of guesses left\nif(remainingGuesses===3){// New round just started\nsetUserAnswerResult(\"\");}else if(remainingGuesses===0){// User ran out of guesses = round over\nsetUserAnswerResult(\"Jeu terminÃ©!\");setSubmitUserAnswerButtonDisabled(true);setStartNewRoundButtonDisabled(false);}},[remainingGuesses]);// Retrieve a new random song from the playlist\n// Executes once during a new round\nconst getNewSong=()=>{try{var randomNumber=Math.floor(Math.random()*gameModePlaylist.length);// Select a random song from the playlist by index\nvar newSong=gameModePlaylist[randomNumber].track;// Get the song by index and save it\nsetSong(newSong);// Set the song's state\nupdateArtistOrSong(Math.floor(Math.random()*2));// 0 = Guess the Artist && 1 = Guess the Song\nsetSubmitUserAnswerButtonDisabled(false);setThumbnail(newSong.album.images[0].url);// Change the img to the thumbnail\nupdateThumbnailBlur();// Reset thumbnail blur\nupdateArtistOrSongTitle(newSong);// Show the name of the artist/song\nsetUserAnswerResult(\"\");// Reset results from user answer\ngameModePlaylist.splice(randomNumber,1);// Remove this song from the playlist\n}catch(error){setUserAnswerResult(\"Sorry! There was an error.\");}};// Set the value of the ArtistOrSongTitle element to the name of the correct answer\nconst updateArtistOrSongTitle=newSong=>{// 0 = guess the artist\nif(artistOrSong===0){setArtistOrSongTitle(newSong.artists[0].name);}// 1 = guess the song\nelse{setArtistOrSongTitle(newSong.album.name);}};// Inform the user what to guess this round\nconst updateArtistOrSong=num=>{if(num===0)setArtistOrSong(\"Guess the artist!\");else setArtistOrSong(\"Guess the song!\");};// Decrease the amount of guesses left\n// Executes only when \"Submit Answer\" button is clicked\nconst updateRemainingGuesses=()=>{setRemainingGuesses(prevGuesses=>prevGuesses-1);};// Change the blur depending on how many guesses are left/if the answer was correct\nconst updateThumbnailBlur=isAnswerCorrect=>{if(!isAnswerCorrect){switch(remainingGuesses){case 3:setThumbnailBlur(\"blur3\");break;case 2:setThumbnailBlur(\"blur2\");break;case 1:setThumbnailBlur(\"blur1\");break;case 0:default:setThumbnailBlur(\"blur0\");break;}}else setThumbnailBlur(\"blur0\");};// Update the UI and score if the user guessed correctly\nconst correctAnswerRender=()=>{setUserAnswerResult(\"Correct!\");// Tell the user they're correct\nsetScore(score=>score+(remainingGuesses+1));// Increase the total score based on how many guesses were left\nsetSubmitUserAnswerButtonDisabled(true);// Disable \"submit\" button so user goes to next round\t\t\t\nsetStartNewRoundButtonDisabled(false);// Enable the new round button\n};const isUserAnswerCorrect=()=>{const input=userInput.current.value.trim().toLowerCase();// If this is an artist name round\nif(artistOrSong===0&&song!==null){const correctAnswer=song.artists[0].name.toLowerCase();if(correctAnswer===input&&input!==\"\")return true;else return false;}// If this is a song name round\nelse if(song!==null){const correctAnswer=song.album.name.toLowerCase();if(correctAnswer===input&&input!==\"\")return true;else return false;}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(UpdatePlaylistName,{playlistYear:playlistYear}),/*#__PURE__*/_jsx(UpdateCurrentRound,{currentRound:currentRound,playlist:playlist}),/*#__PURE__*/_jsx(UpdateScore,{score:score}),/*#__PURE__*/_jsxs(\"div\",{className:\"rounded justify-center\",children:[/*#__PURE__*/_jsx(UpdateThumbnail,{thumbnail:thumbnail,thumbnailBlur:thumbnailBlur}),/*#__PURE__*/_jsx(UpdateArtistOrSongTitle,{artistOrSongTitle:artistOrSongTitle})]}),/*#__PURE__*/_jsx(UpdateArtistOrSong,{artistOrSong:artistOrSong}),/*#__PURE__*/_jsx(UpdateRemainingGuesses,{remainingGuesses:remainingGuesses}),/*#__PURE__*/_jsx(\"input\",{className:\"shadow appearance-none border rounded w-2/3 mx-auto my-4 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",id:\"answer\",type:\"text\",placeholder:\"Qu'est-ce que c'est!?\",ref:userInput}),/*#__PURE__*/_jsx(\"button\",{className:\"bg-white w-1/3 mx-auto my-4 hover:bg-gray-100 disabled:bg-slate-500 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\",id:\"answer-button\",onClick:updateRemainingGuesses,disabled:submitUserAnswerButtonDisabled,children:\"Submit Answer\"}),/*#__PURE__*/_jsx(UpdateUserAnswerResult,{userAnswerResult:userAnswerResult}),/*#__PURE__*/_jsx(\"button\",{className:\"bg-white w-1/3 mx-auto my-4 hover:bg-gray-100 disabled:bg-slate-500 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\",id:\"next-round-button\",onClick:()=>setStartNewRound(prev=>!prev),disabled:startNewRoundButtonDisabled,children:\"Next Round\"})]});}","map":{"version":3,"names":["React","useEffect","useState","useRef","defaultIcon","UpdatePlaylistName","UpdateCurrentRound","UpdateScore","UpdateThumbnail","UpdateArtistOrSongTitle","UpdateArtistOrSong","UpdateRemainingGuesses","UpdateUserAnswerResult","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","GameInterface","_ref","playlistYear","playlist","toggleGameComplete","userInput","userAnswerResult","setUserAnswerResult","startNewRound","setStartNewRound","submitUserAnswerButtonDisabled","setSubmitUserAnswerButtonDisabled","startNewRoundButtonDisabled","setStartNewRoundButtonDisabled","song","setSong","score","setScore","currentRound","setCurrentRound","thumbnail","setThumbnail","thumbnailBlur","setThumbnailBlur","artistOrSongTitle","setArtistOrSongTitle","artistOrSong","setArtistOrSong","remainingGuesses","setRemainingGuesses","gameModePlaylist","tracks","items","total","getNewSong","current","value","error","isAnswerCorrect","isUserAnswerCorrect","correctAnswerRender","updateThumbnailBlur","randomNumber","Math","floor","random","length","newSong","track","updateArtistOrSong","album","images","url","updateArtistOrSongTitle","splice","artists","name","num","updateRemainingGuesses","prevGuesses","input","trim","toLowerCase","correctAnswer","children","className","id","type","placeholder","ref","onClick","disabled","prev"],"sources":["D:/Personal/School/Projects/guess_who_react/client/src/pages/components/GameInterface.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport defaultIcon from \"../../assets/camera.svg\";\r\nimport {\r\n\tUpdatePlaylistName, UpdateCurrentRound, UpdateScore, UpdateThumbnail, UpdateArtistOrSongTitle,\r\n\tUpdateArtistOrSong, UpdateRemainingGuesses, UpdateUserAnswerResult\r\n} from \"./GameInterfaceSubcomponents\";\r\n\r\nexport default function GameInterface({ playlistYear, playlist, toggleGameComplete }) {\r\n\t// Reference for the text input box\r\n\tconst userInput = useRef();\r\n\r\n\t// State handling for UI elements based on game progression\r\n\tconst [userAnswerResult, setUserAnswerResult] = useState(\"\");\r\n\tconst [startNewRound, setStartNewRound] = useState(true);\r\n\tconst [submitUserAnswerButtonDisabled, setSubmitUserAnswerButtonDisabled] = useState(false);\r\n\tconst [startNewRoundButtonDisabled, setStartNewRoundButtonDisabled] = useState(true);\r\n\tconst [song, setSong] = useState(null);\r\n\tconst [score, setScore] = useState(0);\r\n\tconst [currentRound, setCurrentRound] = useState(0);\r\n\tconst [thumbnail, setThumbnail] = useState(defaultIcon);\r\n\tconst [thumbnailBlur, setThumbnailBlur] = useState(30);\r\n\tconst [artistOrSongTitle, setArtistOrSongTitle] = useState(null);\r\n\tconst [artistOrSong, setArtistOrSong] = useState(null);\r\n\tconst [remainingGuesses, setRemainingGuesses] = useState(3);\r\n\r\n\tvar gameModePlaylist = playlist.tracks.items;\r\n\r\n\t// Set the attributes of the page to match the song\r\n\t// Executes on startup and when \"Next Round\" button is clicked\r\n\tuseEffect(() => {\r\n\t\ttry {\r\n\t\t\t// Setup UI and variables for a new round\r\n\t\t\tsetStartNewRoundButtonDisabled(true);\r\n\t\t\tsetRemainingGuesses(3);\r\n\r\n\t\t\t// Cycle through the entire playlist before ending the game\r\n\t\t\tif (currentRound < playlist.tracks.total) {\r\n\t\t\t\tgetNewSong();\r\n\t\t\t\tsetCurrentRound(currentRound => currentRound + 1);\r\n\t\t\t\tuserInput.current.value = \"\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttoggleGameComplete(score);\r\n\t\t\t\tsetScore(0);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error) {\r\n\t\t\tsetUserAnswerResult(\"Sorry! There was an error.\");\r\n\t\t}\r\n\t}, [startNewRound]);\r\n\r\n\t// Disable the game if the user runs out of guesses\r\n\t// Execute every time there is an update to remainingGuesses\r\n\tuseEffect(() => {\r\n\t\t// Handle whether the guess was correct or not\r\n\t\tconst isAnswerCorrect = isUserAnswerCorrect();\r\n\t\tif (isAnswerCorrect) correctAnswerRender();\r\n\t\telse setUserAnswerResult(\"Faux!\");\r\n\t\tupdateThumbnailBlur(isAnswerCorrect);\r\n\r\n\t\t// Update UI depending on the num of guesses left\r\n\t\tif (remainingGuesses === 3) {\t\t\t// New round just started\r\n\t\t\tsetUserAnswerResult(\"\")\r\n\t\t}\r\n\t\telse if (remainingGuesses === 0) {\t\t// User ran out of guesses = round over\r\n\t\t\tsetUserAnswerResult(\"Jeu terminÃ©!\");\r\n\t\t\tsetSubmitUserAnswerButtonDisabled(true);\r\n\t\t\tsetStartNewRoundButtonDisabled(false);\r\n\t\t}\r\n\r\n\t}, [remainingGuesses]);\r\n\r\n\t// Retrieve a new random song from the playlist\r\n\t// Executes once during a new round\r\n\tconst getNewSong = () => {\r\n\t\ttry {\r\n\t\t\tvar randomNumber = Math.floor(Math.random() * gameModePlaylist.length);\t// Select a random song from the playlist by index\r\n\t\t\tvar newSong = gameModePlaylist[randomNumber].track; \t\t\t\t\t// Get the song by index and save it\r\n\r\n\t\t\tsetSong(newSong);\t\t\t\t\t\t\t\t\t\t\t// Set the song's state\r\n\t\t\tupdateArtistOrSong(Math.floor(Math.random() * 2)); \t\t\t// 0 = Guess the Artist && 1 = Guess the Song\r\n\t\t\tsetSubmitUserAnswerButtonDisabled(false);\r\n\t\t\tsetThumbnail(newSong.album.images[0].url);\t\t\t\t\t// Change the img to the thumbnail\r\n\t\t\tupdateThumbnailBlur();\t\t\t\t\t\t\t\t\t\t// Reset thumbnail blur\r\n\t\t\tupdateArtistOrSongTitle(newSong);\t\t\t\t\t\t\t// Show the name of the artist/song\r\n\t\t\tsetUserAnswerResult(\"\");\t\t\t\t\t\t\t\t\t// Reset results from user answer\r\n\t\t\tgameModePlaylist.splice(randomNumber, 1)\t\t\t\t\t// Remove this song from the playlist\r\n\t\t}\r\n\t\tcatch (error) {\r\n\t\t\tsetUserAnswerResult(\"Sorry! There was an error.\");\r\n\t\t}\r\n\t};\r\n\r\n\t// Set the value of the ArtistOrSongTitle element to the name of the correct answer\r\n\tconst updateArtistOrSongTitle = (newSong) => {\r\n\t\t// 0 = guess the artist\r\n\t\tif (artistOrSong === 0) {\r\n\t\t\tsetArtistOrSongTitle(newSong.artists[0].name);\r\n\t\t}\r\n\t\t// 1 = guess the song\r\n\t\telse {\r\n\t\t\tsetArtistOrSongTitle(newSong.album.name);\r\n\t\t}\r\n\t};\r\n\r\n\t// Inform the user what to guess this round\r\n\tconst updateArtistOrSong = (num) => {\r\n\t\tif (num === 0) setArtistOrSong(`Guess the artist!`)\r\n\t\telse setArtistOrSong(`Guess the song!`)\r\n\t};\r\n\r\n\t// Decrease the amount of guesses left\r\n\t// Executes only when \"Submit Answer\" button is clicked\r\n\tconst updateRemainingGuesses = () => {\r\n\t\tsetRemainingGuesses(prevGuesses => prevGuesses - 1);\r\n\t};\r\n\r\n\t// Change the blur depending on how many guesses are left/if the answer was correct\r\n\tconst updateThumbnailBlur = (isAnswerCorrect) => {\r\n\t\tif (!isAnswerCorrect) {\r\n\t\t\tswitch (remainingGuesses) {\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tsetThumbnailBlur(\"blur3\")\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tsetThumbnailBlur(\"blur2\")\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tsetThumbnailBlur(\"blur1\")\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 0:\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tsetThumbnailBlur(\"blur0\")\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse setThumbnailBlur(\"blur0\");\r\n\t}\r\n\r\n\t// Update the UI and score if the user guessed correctly\r\n\tconst correctAnswerRender = () => {\r\n\t\tsetUserAnswerResult(\"Correct!\");\t\t\t\t\t// Tell the user they're correct\r\n\t\tsetScore(score => score + (remainingGuesses + 1))\t// Increase the total score based on how many guesses were left\r\n\t\tsetSubmitUserAnswerButtonDisabled(true);\t\t\t// Disable \"submit\" button so user goes to next round\t\t\t\r\n\t\tsetStartNewRoundButtonDisabled(false);\t\t\t\t// Enable the new round button\r\n\t}\r\n\r\n\tconst isUserAnswerCorrect = () => {\r\n\t\tconst input = userInput.current.value.trim().toLowerCase()\r\n\r\n\t\t// If this is an artist name round\r\n\t\tif (artistOrSong === 0 && song !== null) {\r\n\t\t\tconst correctAnswer = song.artists[0].name.toLowerCase();\r\n\r\n\t\t\tif (correctAnswer === input && input !== \"\") return true;\r\n\t\t\telse return false;\r\n\t\t}\r\n\t\t// If this is a song name round\r\n\t\telse if (song !== null) {\r\n\t\t\tconst correctAnswer = song.album.name.toLowerCase()\r\n\t\t\t\r\n\t\t\tif (correctAnswer === input && input !== \"\") return true;\r\n\t\t\telse return false;\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<UpdatePlaylistName playlistYear={playlistYear} />\r\n\t\t\t<UpdateCurrentRound currentRound={currentRound} playlist={playlist} />\r\n\t\t\t<UpdateScore score={score} />\r\n\t\t\t<div className=\"rounded justify-center\">\r\n\t\t\t\t<UpdateThumbnail thumbnail={thumbnail} thumbnailBlur={thumbnailBlur} />\r\n\t\t\t\t<UpdateArtistOrSongTitle artistOrSongTitle={artistOrSongTitle} />\r\n\t\t\t</div>\r\n\t\t\t<UpdateArtistOrSong artistOrSong={artistOrSong} />\r\n\t\t\t<UpdateRemainingGuesses remainingGuesses={remainingGuesses} />\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"shadow appearance-none border rounded w-2/3 mx-auto my-4 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n\t\t\t\tid=\"answer\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Qu'est-ce que c'est!?\"\r\n\t\t\t\tref={userInput} />\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"bg-white w-1/3 mx-auto my-4 hover:bg-gray-100 disabled:bg-slate-500 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\"\r\n\t\t\t\tid=\"answer-button\"\r\n\t\t\t\tonClick={(updateRemainingGuesses)}\r\n\t\t\t\tdisabled={submitUserAnswerButtonDisabled}>\r\n\t\t\t\tSubmit Answer\r\n\t\t\t</button>\r\n\t\t\t<UpdateUserAnswerResult userAnswerResult={userAnswerResult} />\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"bg-white w-1/3 mx-auto my-4 hover:bg-gray-100 disabled:bg-slate-500 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\"\r\n\t\t\t\tid=\"next-round-button\"\r\n\t\t\t\tonClick={() => setStartNewRound(prev => !prev)}\r\n\t\t\t\tdisabled={startNewRoundButtonDisabled}>\r\n\t\t\t\tNext Round\r\n\t\t\t</button>\r\n\t\t</>\r\n\t);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}