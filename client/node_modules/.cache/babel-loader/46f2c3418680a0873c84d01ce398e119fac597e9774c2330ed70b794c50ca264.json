{"ast":null,"code":"// import { Buffer } from 'buffer';\n// Buffer.from('anything', 'base64');\n// window.Buffer = window.Buffer || require(\"buffer\").Buffer;\n\n// const GetToken = async () => {\n// \tconst client_id = process.env.REACT_APP_SPOTIFY_CLIENT_KEY;\n// \tconst client_secret = process.env.REACT_APP_SPOTIFY_SECRET_KEY;\n\n// \ttry {\n// \t\tconst response = await fetch('https://accounts.spotify.com/api/token', {\n// \t\t\tmethod: 'POST',\n// \t\t\tbody: new URLSearchParams({\n// \t\t\t\t'grant_type': 'client_credentials',\n// \t\t\t}),\n// \t\t\theaders:\n// \t\t\t{\n// \t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n// \t\t\t\t'Authorization': 'Basic ' + (Buffer.from(client_id + ':' + client_secret).toString('base64')),\n// \t\t\t}\n// \t\t});\n// \t\tconst accessToken = await response.json();\n// \t\treturn accessToken.access_token;\n\n// \t} catch (error) {\n// \t\tconsole.log(error);\n// \t}\n// }\n\n// async function GetSpotifyPlaylist(accessToken, year) {\n\n// \tvar id = null;\n// \tswitch (year.toString()) {\n// \t  case \"2024\":\n// \t\tid = \"2fmob4Hn1skiTOUb9b4Gt3\"\n// \t\tbreak;\n// \t  case \"2023\":\n// \t\tid = \"48mdyY6bWtuVabFIVaRcnR\"\n// \t\tbreak;\n// \t  case \"2022\":\n// \t\tid = \"01rRNah88ALTM6ME20ewXo\"\n// \t\tbreak;\n// \t  case \"2021\":\n// \t\tid = \"38uF6PlAcB8iFqxQQwExo3\"\n// \t\tbreak;\n// \t  case \"2020\":\n// \t\tid = \"2lsLTQQXocz90f9XvJTOUm\"\n// \t\tbreak;\n// \t  case \"2019\":\n// \t\tdefault:\n// \t\tid = \"5gMOpwqLmWLStMxPXVqpQ6\"\n// \t\tbreak;\n// \t}\n\n// \ttry {\n// \t\tconst response = await fetch(`https://api.spotify.com/v1/playlists/${id}`, {\n// \t\t\tmethod: 'GET',\n// \t\t\theaders: {\n// \t\t\t\tAuthorization: 'Bearer ' + accessToken\n// \t\t\t}\n// \t\t});\n// \t\treturn await response.json()\n\n// \t} catch (error) {\n// \t\tconsole.error(\"Error fetching playlist:\", error);\n// \t\tthrow error;\n// \t}\n// }\n\n// export default async function SpotifyData(year) {\n// \tconst accessToken = await GetToken();\n// \tconst playlist = await GetSpotifyPlaylist(accessToken, year);\n// \treturn playlist;\n// }\n\nexport default async function getSpotifyData(year) {\n  try {\n    const response = await fetch('/stfyat');\n    if (!response.ok) {\n      throw new Error('Failed to fetch');\n    }\n    const playlistResponse = await response.json();\n    setPlaylist(playlistResponse);\n  } catch (error) {\n    console.error(error);\n  }\n}","map":{"version":3,"names":["getSpotifyData","year","response","fetch","ok","Error","playlistResponse","json","setPlaylist","error","console"],"sources":["D:/Personal/School/Projects/guess_who_react/client/src/services/Spotify.js"],"sourcesContent":["// import { Buffer } from 'buffer';\r\n// Buffer.from('anything', 'base64');\r\n// window.Buffer = window.Buffer || require(\"buffer\").Buffer;\r\n\r\n// const GetToken = async () => {\r\n// \tconst client_id = process.env.REACT_APP_SPOTIFY_CLIENT_KEY;\r\n// \tconst client_secret = process.env.REACT_APP_SPOTIFY_SECRET_KEY;\r\n\r\n// \ttry {\r\n// \t\tconst response = await fetch('https://accounts.spotify.com/api/token', {\r\n// \t\t\tmethod: 'POST',\r\n// \t\t\tbody: new URLSearchParams({\r\n// \t\t\t\t'grant_type': 'client_credentials',\r\n// \t\t\t}),\r\n// \t\t\theaders:\r\n// \t\t\t{\r\n// \t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\r\n// \t\t\t\t'Authorization': 'Basic ' + (Buffer.from(client_id + ':' + client_secret).toString('base64')),\r\n// \t\t\t}\r\n// \t\t});\r\n// \t\tconst accessToken = await response.json();\r\n// \t\treturn accessToken.access_token;\r\n\r\n// \t} catch (error) {\r\n// \t\tconsole.log(error);\r\n// \t}\r\n// }\r\n\r\n// async function GetSpotifyPlaylist(accessToken, year) {\r\n\r\n// \tvar id = null;\r\n// \tswitch (year.toString()) {\r\n// \t  case \"2024\":\r\n// \t\tid = \"2fmob4Hn1skiTOUb9b4Gt3\"\r\n// \t\tbreak;\r\n// \t  case \"2023\":\r\n// \t\tid = \"48mdyY6bWtuVabFIVaRcnR\"\r\n// \t\tbreak;\r\n// \t  case \"2022\":\r\n// \t\tid = \"01rRNah88ALTM6ME20ewXo\"\r\n// \t\tbreak;\r\n// \t  case \"2021\":\r\n// \t\tid = \"38uF6PlAcB8iFqxQQwExo3\"\r\n// \t\tbreak;\r\n// \t  case \"2020\":\r\n// \t\tid = \"2lsLTQQXocz90f9XvJTOUm\"\r\n// \t\tbreak;\r\n// \t  case \"2019\":\r\n// \t\tdefault:\r\n// \t\tid = \"5gMOpwqLmWLStMxPXVqpQ6\"\r\n// \t\tbreak;\r\n// \t}\r\n\r\n// \ttry {\r\n// \t\tconst response = await fetch(`https://api.spotify.com/v1/playlists/${id}`, {\r\n// \t\t\tmethod: 'GET',\r\n// \t\t\theaders: {\r\n// \t\t\t\tAuthorization: 'Bearer ' + accessToken\r\n// \t\t\t}\r\n// \t\t});\r\n// \t\treturn await response.json()\r\n\r\n// \t} catch (error) {\r\n// \t\tconsole.error(\"Error fetching playlist:\", error);\r\n// \t\tthrow error;\r\n// \t}\r\n// }\r\n\r\n// export default async function SpotifyData(year) {\r\n// \tconst accessToken = await GetToken();\r\n// \tconst playlist = await GetSpotifyPlaylist(accessToken, year);\r\n// \treturn playlist;\r\n// }\r\n\r\nexport default async function getSpotifyData(year) {\r\n\ttry {\r\n\t\tconst response = await fetch('/stfyat');\r\n\r\n\t\tif (!response.ok) {\r\n\t\t\tthrow new Error('Failed to fetch');\r\n\t\t}\r\n\r\n\t\tconst playlistResponse = await response.json();\r\n\t\tsetPlaylist(playlistResponse)\r\n\t}\r\n\tcatch (error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n}"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,eAAe,eAAeA,cAAcA,CAACC,IAAI,EAAE;EAClD,IAAI;IACH,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,SAAS,CAAC;IAEvC,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MACjB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;IACnC;IAEA,MAAMC,gBAAgB,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC9CC,WAAW,CAACF,gBAAgB,CAAC;EAC9B,CAAC,CACD,OAAOG,KAAK,EAAE;IACbC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACrB;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}