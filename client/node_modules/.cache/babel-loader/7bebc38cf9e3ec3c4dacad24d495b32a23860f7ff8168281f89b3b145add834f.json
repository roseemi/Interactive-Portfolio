{"ast":null,"code":"import React,{useEffect,useState,useRef}from\"react\";import defaultIcon from\"../../assets/camera.svg\";import{PlaylistName,Round,Score,Thumbnail,NameOfArtistOrSong,ArtistOrSong,RemainingGuesses,UserAnswerResult}from\"./GameInterfaceChildComponents\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function GameInterface(_ref){let{playlistYear,playlist,toggleGameComplete}=_ref;// Reference for the text input box\nconst userInput=useRef();// State handling for UI elements based on game progression\nconst[submitButtonDisabled,setSubmitButtonDisabled]=useState(false);const[newRoundButtonDisabled,setNewRoundButtonDisabled]=useState(true);const[song,setSong]=useState(null);const[round,setRound]=useState(1);const[score,setScore]=useState(0);const[isAnswerCorrect,setIsAnswerCorrect]=useState(false);const[userAnswerResult,setUserAnswerResult]=useState(\"\");const[scoreIncreaseBy,setScoreIncreaseBy]=useState(0);const[thumbnail,setThumbnail]=useState(defaultIcon);const[thumbnailBlur,setThumbnailBlur]=useState(30);const[artistOrSongTitle,setArtistOrSongTitle]=useState(null);const[artistOrSong,setArtistOrSong]=useState(null);const[remainingGuesses,setRemainingGuesses]=useState(3);var gameModePlaylist=playlist.tracks.items;// Set the attributes of the page to match the song\n// Executes on startup and when \"Next Round\" button is clicked\nuseEffect(()=>{try{// Setup UI and variables for a new round\nsetNewRoundButtonDisabled(true);setRemainingGuesses(3);// Cycle through the entire playlist before ending the game\nif(round<=playlist.tracks.total){getNewSong();// setRound(round => round + 1);\nuserInput.current.value=\"\";}else{toggleGameComplete(score);setScore(0);round(0);}}catch(error){setUserAnswerResult(\"Sorry! There was an error.\");}},[round]);// Disable the game if the user runs out of guesses\n// Execute every time there is an update to remainingGuesses\nuseEffect(()=>{// Determine if the guess was correct or not\nconst isCorrect=isCorrectAnswer();// Local use so the round can be terminated if isCorrectAnswer state does not change\nsetIsAnswerCorrect(isCorrect);// Global state use\n// Update thumbnail UI based on the num of guesses left\nupdateThumbnailBlur(isCorrect);// User ran out of guesses and isCorrectAnswer state never to true changed = round over\nif(remainingGuesses===0&&!isCorrect){setScoreIncreaseBy(0);setUserAnswerResult(\"Arrondissez-vous!\");setSubmitButtonDisabled(true);setNewRoundButtonDisabled(false);}else if(remainingGuesses===3)setUserAnswerResult(\"\");// New round - reset result to blank\nelse if(!isCorrect)setUserAnswerResult(\"Faux!\");},[remainingGuesses]);// Update UI depending on whether the answer was correct or not\n// Executes after the remainingGuesses useEffect()\nuseEffect(()=>{if(isAnswerCorrect)correctAnswerRender();// Render the correct answer UI\n},[isAnswerCorrect]);// Retrieve a new random song from the playlist\n// Executes once during a new round\nconst getNewSong=()=>{try{var randomNumber=Math.floor(Math.random()*gameModePlaylist.length);// Select a random song from the playlist by index\nvar newSong=gameModePlaylist[randomNumber].track;// Get the song by index and save it\nsetSong(newSong);// Set the song's state\nupdateArtistOrSong(Math.floor(Math.random()*2),newSong);// 0 = Guess the Artist && 1 = Guess the Song\nsetSubmitButtonDisabled(false);setThumbnail(newSong.album.images[0].url);// Change the img to the thumbnail\nupdateThumbnailBlur();// Reset thumbnail blur\nsetUserAnswerResult(\"\");// Reset results from user answer\ngameModePlaylist.splice(randomNumber,1);// Remove this song from the playlist\n}catch(error){setUserAnswerResult(\"Sorry! There was an error.\");}};// Inform the user what to guess this round\nconst updateArtistOrSong=(num,newSong)=>{setArtistOrSong(num);// 0 = guess the artist\nif(num===0){setArtistOrSongTitle(newSong.artists[0].name);}// 1 = guess the song\nelse{setArtistOrSongTitle(newSong.name);}};// Decrease the amount of guesses left\n// Executes only when \"Submit Answer\" button is clicked\nconst updateRemainingGuesses=()=>{setRemainingGuesses(prevGuesses=>prevGuesses-1);};// Change the blur depending on how many guesses are left/if the answer was correct\nconst updateThumbnailBlur=isAnswerCorrect=>{if(!isAnswerCorrect){switch(remainingGuesses){case 3:setThumbnailBlur(\"blur3\");break;case 2:setThumbnailBlur(\"blur2\");break;case 1:setThumbnailBlur(\"blur1\");break;case 0:default:setThumbnailBlur(\"blur0\");break;}}else setThumbnailBlur(\"blur0\");};// Update the UI and score if the user guessed correctly\nconst correctAnswerRender=()=>{setUserAnswerResult(\"Correct!\");// Tell the user they're correct\nsetScoreIncreaseBy(remainingGuesses+1);setScore(score=>score+(remainingGuesses+1));// Increase the total score based on how many guesses were left\nsetSubmitButtonDisabled(true);// Disable \"submit\" button so user goes to next round\t\t\t\nsetNewRoundButtonDisabled(false);// Enable the new round button\n};const isCorrectAnswer=()=>{const input=userInput.current.value.trim().toLowerCase();// If this is an artist name round\nif(artistOrSong===0&&song!==null){const correctAnswer=song.artists[0].name.toLowerCase().replaceAll(\"â€™\",\"'\");if(correctAnswer===input&&input!==\"\")return true;else return false;}// If this is a song name round\nelse if(song!==null){const correctAnswer=song.name.toLowerCase();if(correctAnswer===input&&input!==\"\")return true;else return false;}};return/*#__PURE__*/_jsxs(\"div\",{className:\"max-h-11/12\",children:[/*#__PURE__*/_jsx(PlaylistName,{playlist:playlist}),/*#__PURE__*/_jsx(Round,{round:round,playlist:playlist}),/*#__PURE__*/_jsx(Score,{score:score,scoreIncreaseBy:scoreIncreaseBy}),/*#__PURE__*/_jsxs(\"div\",{className:\"rounded justify-center\",children:[/*#__PURE__*/_jsx(Thumbnail,{thumbnail:thumbnail,thumbnailBlur:thumbnailBlur}),/*#__PURE__*/_jsx(NameOfArtistOrSong,{artistOrSongTitle:artistOrSongTitle,isAnswerCorrect:isAnswerCorrect,remainingGuesses:remainingGuesses})]}),/*#__PURE__*/_jsx(RemainingGuesses,{remainingGuesses:remainingGuesses}),/*#__PURE__*/_jsx(ArtistOrSong,{artistOrSong:artistOrSong}),/*#__PURE__*/_jsx(\"input\",{className:\"shadow appearance-none border rounded w-5/6 lg:w-2/3 mx-auto my-4 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",id:\"answer\",type:\"text\",placeholder:\"Qu'est-ce que c'est!?\",onKeyDown:e=>{if(e.key===\"Enter\"&&!submitButtonDisabled)updateRemainingGuesses();},ref:userInput}),/*#__PURE__*/_jsx(UserAnswerResult,{userAnswerResult:userAnswerResult}),/*#__PURE__*/_jsx(\"button\",{className:\"bg-white w-2/3 lg:w-1/3 mx-auto hover:bg-gray-100 disabled:bg-slate-500 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\",id:\"answer-button\",onClick:updateRemainingGuesses,disabled:submitButtonDisabled,children:\"Soumettre La R\\xE9ponse\"}),/*#__PURE__*/_jsx(\"button\",{className:\"bg-white w-2/3 lg:w-1/3 my-4 mx-auto hover:bg-gray-100 disabled:bg-slate-500 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded block shadow\",id:\"next-round-button\",onClick:()=>setRound(round=>round+1),disabled:newRoundButtonDisabled,children:\"Tour Suivant\"})]});}","map":{"version":3,"names":["React","useEffect","useState","useRef","defaultIcon","PlaylistName","Round","Score","Thumbnail","NameOfArtistOrSong","ArtistOrSong","RemainingGuesses","UserAnswerResult","jsx","_jsx","jsxs","_jsxs","GameInterface","_ref","playlistYear","playlist","toggleGameComplete","userInput","submitButtonDisabled","setSubmitButtonDisabled","newRoundButtonDisabled","setNewRoundButtonDisabled","song","setSong","round","setRound","score","setScore","isAnswerCorrect","setIsAnswerCorrect","userAnswerResult","setUserAnswerResult","scoreIncreaseBy","setScoreIncreaseBy","thumbnail","setThumbnail","thumbnailBlur","setThumbnailBlur","artistOrSongTitle","setArtistOrSongTitle","artistOrSong","setArtistOrSong","remainingGuesses","setRemainingGuesses","gameModePlaylist","tracks","items","total","getNewSong","current","value","error","isCorrect","isCorrectAnswer","updateThumbnailBlur","correctAnswerRender","randomNumber","Math","floor","random","length","newSong","track","updateArtistOrSong","album","images","url","splice","num","artists","name","updateRemainingGuesses","prevGuesses","input","trim","toLowerCase","correctAnswer","replaceAll","className","children","id","type","placeholder","onKeyDown","e","key","ref","onClick","disabled"],"sources":["D:/Personal/School/Projects/guess_who_react/client/src/pages/components/GameInterface.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport defaultIcon from \"../../assets/camera.svg\";\r\nimport {\r\n\tPlaylistName, Round, Score, Thumbnail, NameOfArtistOrSong,\r\n\tArtistOrSong, RemainingGuesses, UserAnswerResult\r\n} from \"./GameInterfaceChildComponents\";\r\n\r\nexport default function GameInterface({ playlistYear, playlist, toggleGameComplete }) {\r\n\t// Reference for the text input box\r\n\tconst userInput = useRef();\r\n\r\n\t// State handling for UI elements based on game progression\r\n\tconst [submitButtonDisabled, setSubmitButtonDisabled] = useState(false);\r\n\tconst [newRoundButtonDisabled, setNewRoundButtonDisabled] = useState(true);\r\n\tconst [song, setSong] = useState(null);\r\n\tconst [round, setRound] = useState(1);\r\n\tconst [score, setScore] = useState(0);\r\n\tconst [isAnswerCorrect, setIsAnswerCorrect] = useState(false);\r\n\tconst [userAnswerResult, setUserAnswerResult] = useState(\"\");\r\n\tconst [scoreIncreaseBy, setScoreIncreaseBy] = useState(0);\r\n\tconst [thumbnail, setThumbnail] = useState(defaultIcon);\r\n\tconst [thumbnailBlur, setThumbnailBlur] = useState(30);\r\n\tconst [artistOrSongTitle, setArtistOrSongTitle] = useState(null);\r\n\tconst [artistOrSong, setArtistOrSong] = useState(null);\r\n\tconst [remainingGuesses, setRemainingGuesses] = useState(3);\r\n\r\n\tvar gameModePlaylist = playlist.tracks.items;\r\n\r\n\t// Set the attributes of the page to match the song\r\n\t// Executes on startup and when \"Next Round\" button is clicked\r\n\tuseEffect(() => {\r\n\t\ttry {\r\n\t\t\t// Setup UI and variables for a new round\r\n\t\t\tsetNewRoundButtonDisabled(true);\r\n\t\t\tsetRemainingGuesses(3);\r\n\r\n\t\t\t// Cycle through the entire playlist before ending the game\r\n\t\t\tif (round <= playlist.tracks.total) {\r\n\t\t\t\tgetNewSong();\r\n\t\t\t\t// setRound(round => round + 1);\r\n\t\t\t\tuserInput.current.value = \"\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttoggleGameComplete(score);\r\n\t\t\t\tsetScore(0);\r\n\t\t\t\tround(0);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error) {\r\n\t\t\tsetUserAnswerResult(\"Sorry! There was an error.\");\r\n\t\t}\r\n\t}, [round]);\r\n\r\n\t// Disable the game if the user runs out of guesses\r\n\t// Execute every time there is an update to remainingGuesses\r\n\tuseEffect(() => {\r\n\t\t// Determine if the guess was correct or not\r\n\t\tconst isCorrect = isCorrectAnswer();\t// Local use so the round can be terminated if isCorrectAnswer state does not change\r\n\t\tsetIsAnswerCorrect(isCorrect);\t\t\t// Global state use\r\n\r\n\t\t// Update thumbnail UI based on the num of guesses left\r\n\t\tupdateThumbnailBlur(isCorrect);\r\n\r\n\t\t// User ran out of guesses and isCorrectAnswer state never to true changed = round over\r\n\t\tif (remainingGuesses === 0 && !isCorrect) {\r\n\t\t\tsetScoreIncreaseBy(0);\r\n\t\t\tsetUserAnswerResult(\"Arrondissez-vous!\");\r\n\t\t\tsetSubmitButtonDisabled(true);\r\n\t\t\tsetNewRoundButtonDisabled(false);\r\n\t\t}\r\n\t\telse if (remainingGuesses === 3) setUserAnswerResult(\"\");\t// New round - reset result to blank\r\n\t\telse if (!isCorrect) setUserAnswerResult(\"Faux!\");\r\n\t}, [remainingGuesses]);\r\n\r\n\t// Update UI depending on whether the answer was correct or not\r\n\t// Executes after the remainingGuesses useEffect()\r\n\tuseEffect(() => {\r\n\t\tif (isAnswerCorrect) correctAnswerRender();\t\t\t\t\t// Render the correct answer UI\r\n\t}, [isAnswerCorrect]);\r\n\r\n\t// Retrieve a new random song from the playlist\r\n\t// Executes once during a new round\r\n\tconst getNewSong = () => {\r\n\t\ttry {\r\n\t\t\tvar randomNumber = Math.floor(Math.random() * gameModePlaylist.length);\t// Select a random song from the playlist by index\r\n\t\t\tvar newSong = gameModePlaylist[randomNumber].track; \t\t\t\t\t// Get the song by index and save it\r\n\r\n\t\t\tsetSong(newSong);\t\t\t\t\t\t\t\t\t\t\t// Set the song's state\r\n\t\t\tupdateArtistOrSong(Math.floor(Math.random() * 2), newSong); // 0 = Guess the Artist && 1 = Guess the Song\r\n\t\t\tsetSubmitButtonDisabled(false);\r\n\t\t\tsetThumbnail(newSong.album.images[0].url);\t\t\t\t\t// Change the img to the thumbnail\r\n\t\t\tupdateThumbnailBlur();\t\t\t\t\t\t\t\t\t\t// Reset thumbnail blur\r\n\t\t\tsetUserAnswerResult(\"\");\t\t\t\t\t\t\t\t\t// Reset results from user answer\r\n\t\t\tgameModePlaylist.splice(randomNumber, 1)\t\t\t\t\t// Remove this song from the playlist\r\n\t\t}\r\n\t\tcatch (error) {\r\n\t\t\tsetUserAnswerResult(\"Sorry! There was an error.\");\r\n\t\t}\r\n\t};\r\n\r\n\t// Inform the user what to guess this round\r\n\tconst updateArtistOrSong = (num, newSong) => {\r\n\t\tsetArtistOrSong(num);\r\n\t\t// 0 = guess the artist\r\n\t\tif (num === 0) {\r\n\t\t\tsetArtistOrSongTitle(newSong.artists[0].name);\r\n\t\t}\r\n\t\t// 1 = guess the song\r\n\t\telse {\r\n\t\t\tsetArtistOrSongTitle(newSong.name);\r\n\t\t}\r\n\t};\r\n\r\n\t// Decrease the amount of guesses left\r\n\t// Executes only when \"Submit Answer\" button is clicked\r\n\tconst updateRemainingGuesses = () => {\r\n\t\tsetRemainingGuesses(prevGuesses => prevGuesses - 1);\r\n\t};\r\n\r\n\t// Change the blur depending on how many guesses are left/if the answer was correct\r\n\tconst updateThumbnailBlur = (isAnswerCorrect) => {\r\n\t\tif (!isAnswerCorrect) {\r\n\t\t\tswitch (remainingGuesses) {\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tsetThumbnailBlur(\"blur3\")\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tsetThumbnailBlur(\"blur2\")\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tsetThumbnailBlur(\"blur1\")\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 0:\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tsetThumbnailBlur(\"blur0\")\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse setThumbnailBlur(\"blur0\");\r\n\t}\r\n\r\n\t// Update the UI and score if the user guessed correctly\r\n\tconst correctAnswerRender = () => {\r\n\t\tsetUserAnswerResult(\"Correct!\");\t\t\t\t\t// Tell the user they're correct\r\n\t\tsetScoreIncreaseBy(remainingGuesses + 1);\r\n\t\tsetScore(score => score + (remainingGuesses + 1))\t// Increase the total score based on how many guesses were left\r\n\t\tsetSubmitButtonDisabled(true);\t\t\t\t\t\t// Disable \"submit\" button so user goes to next round\t\t\t\r\n\t\tsetNewRoundButtonDisabled(false);\t\t\t\t\t// Enable the new round button\r\n\t}\r\n\r\n\tconst isCorrectAnswer = () => {\r\n\t\tconst input = userInput.current.value.trim().toLowerCase()\r\n\t\t\r\n\t\t// If this is an artist name round\r\n\t\tif (artistOrSong === 0 && song !== null) {\r\n\t\t\tconst correctAnswer = song.artists[0].name.toLowerCase().replaceAll(\"â€™\", \"'\");\r\n\r\n\t\t\tif (correctAnswer === input && input !== \"\") return true;\r\n\t\t\telse return false;\r\n\t\t}\r\n\t\t// If this is a song name round\r\n\t\telse if (song !== null) {\r\n\t\t\tconst correctAnswer = song.name.toLowerCase()\r\n\t\t\t\r\n\t\t\tif (correctAnswer === input && input !== \"\") return true;\r\n\t\t\telse return false;\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"max-h-11/12\">\r\n\t\t\t<PlaylistName \r\n\t\t\t\tplaylist={playlist} \r\n\t\t\t/>\r\n\t\t\t<Round \r\n\t\t\t\tround={round} \r\n\t\t\t\tplaylist={playlist} \r\n\t\t\t/>\r\n\t\t\t<Score \r\n\t\t\t\tscore={score} \r\n\t\t\t\tscoreIncreaseBy={scoreIncreaseBy} \r\n\t\t\t/>\r\n\t\t\t<div className=\"rounded justify-center\">\r\n\t\t\t\t<Thumbnail \r\n\t\t\t\t\tthumbnail={thumbnail} \r\n\t\t\t\t\tthumbnailBlur={thumbnailBlur} \r\n\t\t\t\t/>\r\n\t\t\t\t<NameOfArtistOrSong \r\n\t\t\t\t\tartistOrSongTitle={artistOrSongTitle}\r\n\t\t\t\t\tisAnswerCorrect={isAnswerCorrect} \r\n\t\t\t\t\tremainingGuesses={remainingGuesses} \r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<RemainingGuesses \r\n\t\t\t\tremainingGuesses={remainingGuesses} \r\n\t\t\t/>\r\n\t\t\t<ArtistOrSong \r\n\t\t\t\tartistOrSong={artistOrSong} \r\n\t\t\t/>\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"shadow appearance-none border rounded w-5/6 lg:w-2/3 mx-auto my-4 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n\t\t\t\tid=\"answer\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Qu'est-ce que c'est!?\"\r\n\t\t\t\tonKeyDown={(e) => {\r\n\t\t\t\t\tif (e.key === \"Enter\" && !submitButtonDisabled)\r\n\t\t\t\t\t\tupdateRemainingGuesses();\r\n\t\t\t\t\t}}\r\n\t\t\t\tref={userInput} />\r\n\t\t\t<UserAnswerResult userAnswerResult={userAnswerResult} />\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"bg-white w-2/3 lg:w-1/3 mx-auto hover:bg-gray-100 disabled:bg-slate-500 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\"\r\n\t\t\t\tid=\"answer-button\"\r\n\t\t\t\tonClick={(updateRemainingGuesses)}\r\n\t\t\t\tdisabled={submitButtonDisabled}>\r\n\t\t\t\tSoumettre La RÃ©ponse\r\n\t\t\t</button>\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"bg-white w-2/3 lg:w-1/3 my-4 mx-auto hover:bg-gray-100 disabled:bg-slate-500 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded block shadow\"\r\n\t\t\t\tid=\"next-round-button\"\r\n\t\t\t\tonClick={() => setRound(round => round + 1)}\r\n\t\t\t\tdisabled={newRoundButtonDisabled}>\r\n\t\t\t\tTour Suivant\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}